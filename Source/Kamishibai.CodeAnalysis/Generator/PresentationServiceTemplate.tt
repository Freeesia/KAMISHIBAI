<#@ template debug="false" hostspecific="false" language="C#" inherits="TemplateBase" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using Kamishibai;

namespace <#= Namespace #>;

public partial interface IPresentationService : IPresentationServiceBase
{
<#
foreach(var navigationInfo in NavigationInfos)
{
#>
    public Task<bool> NavigateTo<#= navigationInfo.NavigationName #>Async(<#= navigationInfo.NavigationParameters #>);
<#  
}
#>
<#
foreach(var openWindowInfo in OpenWindowInfos)
{
#>
    public Task Open<#= openWindowInfo.NavigationName #>WindowAsync(<#= openWindowInfo.NavigationParameters #>, object? owner = null, OpenWindowOptions? options = null);
<#  
}
#>
}

public class PresentationService : PresentationServiceBase, IPresentationService
{
    private readonly IServiceProvider _serviceProvider;

    public PresentationService(IServiceProvider serviceProvider, INavigationFrameProvider navigationFrameProvider, IWindowService windowService)
        : base (serviceProvider, navigationFrameProvider, windowService)
    {
        _serviceProvider = serviceProvider;
    }

<#
foreach(var navigationInfo in NavigationInfos)
{
#>
    public Task<bool> NavigateTo<#= navigationInfo.NavigationName #>Async(<#= navigationInfo.NavigationParameters #>)
    {
        return NavigateAsync(
            new <#= navigationInfo.ViewModelName #>(
                <#= navigationInfo.ConstructorParameters #>
            ), 
            frameName);
    }

<#  
}
#>

<#
foreach(var openWindowInfo in OpenWindowInfos)
{
#>
    public Task Open<#= openWindowInfo.NavigationName #>WindowAsync(<#= openWindowInfo.NavigationParameters #>, object? owner = null, OpenWindowOptions? options = null)
    {
        return OpenWindowAsync(
            new <#= openWindowInfo.ViewModelName #>(
                <#= openWindowInfo.ConstructorParameters #>
            ), 
            owner,
            options);
    }

<#  
}
#>
}